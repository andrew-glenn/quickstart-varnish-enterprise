#!/bin/bash

VARNISH_BACKEND_ADDRESS=$1
VARNISH_BACKEND_PROTOCOL=$2
VHA_TOKEN=$3
DEFAULT_HITCH=/etc/default/hitch
OVERRIDE_HITCH=/etc/systemd/system/hitch.service.d/override.conf
OVERRIDE_VARNISH=/etc/systemd/system/varnish.service.d/override.conf
OVERRIDE_VHA_AGENT=/etc/systemd/system/vha-agent.service.d/override.conf
VARNISH_DEFAULT_VCL=/etc/varnish/default.vcl
VARNISH_HIT_MISS_VCL=/etc/varnish/hit-miss.vcl
VHA_VCL=/etc/varnish/vha.vcl
VHA_NODE_CONF=/etc/varnish/nodes.conf
VHA_HOSTNAME=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)

TOTAL_MEM=$(free -m | grep Mem | awk -F" " {'print $2'})
TWO_OF_THREE_MEM=$(expr $(expr $TOTAL_MEM / 3) + $(expr $TOTAL_MEM / 3))

mkdir -p /etc/systemd/system/{varnish.service.d,hitch.service.d,vha-agent.service.d}

cat > $OVERRIDE_VARNISH <<EOF
# Generated by CloudFormation

[Service]
ExecStart=
ExecStart=/usr/sbin/varnishd -a :80 -a 127.0.0.1:8443,PROXY -T localhost:6082 -f $VARNISH_DEFAULT_VCL -S /etc/varnish/secret -s malloc,${TWO_OF_THREE_MEM}m -p vsl_reclen=4084
EOF

cat > $DEFAULT_HITCH <<EOF
# Generated by CloudFormation

START=true
HITCH_OPTIONS="--config=/etc/hitch/hitch.conf"
EOF

cat > $VARNISH_HIT_MISS_VCL <<EOF
# Generated by CloudFormation

sub vcl_recv {
	unset req.http.x-cache;
}

sub vcl_hit {
	set req.http.x-cache = "hit";
}

sub vcl_miss {
	set req.http.x-cache = "miss";
}

sub vcl_pass {
	set req.http.x-cache = "pass";
}

sub vcl_pipe {
	set req.http.x-cache = "pipe uncacheable";
}

sub vcl_synth {
	set resp.http.x-cache = "synth synth";
}

sub vcl_deliver {
	if (obj.uncacheable) {
		set req.http.x-cache = req.http.x-cache + " uncacheable" ;
	} else {
		set req.http.x-cache = req.http.x-cache + " cached" ;
	}
	# uncomment the following line to show the information in the response
	# set resp.http.x-cache = req.http.x-cache;
}
EOF

cat > $VARNISH_DEFAULT_VCL <<EOF
# Generated by CloudFormation

vcl 4.1;
import goto;
include "hit-miss.vcl";
include "vha_41.vcl";

# Never used
backend dummy { .host = "0:0"; }

sub vcl_init {
	vha_opts.set("token", "${VHA_TOKEN}");
	# vha_opts.set("replicate_body", "yes");
}

sub vcl_backend_fetch {
	set bereq.backend = goto.dns_backend("${VARNISH_BACKEND_PROTOCOL}://${VARNISH_BACKEND_ADDRESS}");
	set bereq.http.host = "${VARNISH_BACKEND_ADDRESS}";
	# To clean up the backend request
	unset bereq.http.grace;
}

sub vcl_backend_response {
	if (beresp.status >= 500 && beresp.status < 600) {
		return (abandon);
	}
	# Maximum limit for grace
	set beresp.grace = 1d;
}

sub vcl_backend_error {
	# Retry the backend request if we're not happy with the response status.
	if (beresp.status >= 500 && beresp.status < 600) {
		set beresp.http.X-Retried = bereq.retries;
		return (retry);
	}
}
EOF

cat > $OVERRIDE_VHA_AGENT <<EOF
# Generated by CloudFormation

[Service]
ExecStart=
ExecStart=/usr/bin/vha-agent -D -t off -P /run/vha-agent/vha-agent.pid -N ${VHA_NODE_CONF} -m ${VHA_HOSTNAME} -s /run/vha-agent/vha-status -T ${VHA_TOKEN}
EOF

systemctl daemon-reload
systemctl restart hitch
systemctl restart varnish
systemctl restart vha-agent